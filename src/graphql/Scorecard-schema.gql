type Scorecard {
  Id: Int @examples(values: 493)
  Type: String @examples(values: "AngularScorecard")
  Key: String @examples(values: "AngularScorecard_493")
  MeasurableOrder: [MeasurableOrder] @listLength(min: 0, max: 5)
  Measurables: [Measurable] @listLength(min: 0, max: 5)
  Scores: [Score] @listLength(min: 0, max: 5)
  Weeks: [Week]
  ReverseScorecard: Boolean 
  ScorecardWeekDay: String @examples(values: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"])
  Period: String @examples(values: "Weekly")
  DateFormat1: String @examples(values: "MMM d")
  DateFormat2: String @examples(values: "MMM d")
}

type User {
  Id: Int @examples(values: 605)
  Type: String @examples(values: "AngularUser")
  Key: String @examples(values: "AngularUser_605")
  Name: String @examples(values: "Danilo Zabala")
  ImageUrl: String @examples(values: "/i/userplaceholder")
}

type MeasurableOrder {
  Id: String @examples(values: ["493_1060", "493_1061"])
  Type: String @examples(values: "AngularMeasurableOrder")
  ScorecardId: Int @examples(values: 493)
  MeasurableId: Int @examples(values: [1060, 1061])
  Ordering: Int @examples(values: [0, 1])
  Key: String @examples(values: ["AngularMeasurableOrder_493_1060", "AngularMeasurableOrder_493_1061"])
}

type Measurable {
  Name: String @examples(values: "Measurable #1")
  Id: Int @examples(values: 1060)
  Type: String @examples(values: "AngularMeasurable")
  Key: String @examples(values: "AngularMeasurable_1060")
  Owner: User
  Admin: User
  Target: Int @examples(values: 1)
  AltTarget: Int
  Direction: String @examples(values: ["LessThanOrEqual", "LessThan", "GreaterThan", "EqualTo", "GreaterThanNotEqual", "Between"])
  IsDivider: Boolean @examples(values: false)
  IsReorderable: Boolean @examples(values: true)
  ShowCumulative: Boolean
  Cumulative: Int
  CumulativeRange: String @examples(values: "2019-11-08T03:23:51")
  Modifiers: String @examples(values: ["None", "Dollar", "Percent", "Pound", "Euros"])
  Ordering: Int @examples(values: 0)
  Disabled: Boolean
  Generated: Boolean
  IsFormula: Boolean @examples(values: false)
  Average: Int
  ShowAverage: Boolean @examples(values: false)
  AverageRange: String @examples(values: "2019-11-08T03:23:51")
  Permission: PermissionDto
  Origins: NameId
}

type Score {
  Id: Int @examples(values: 70529)
  Type: String @examples(values: "AngularScore")
  Key: String @examples(values: "AngularScore_70529")
  ForWeek: Int @examples(values: 2587)
  Week: String @examples(values: "2019-07-28T00:00:00Z")
  MeasurableId: Int @examples(values: 1060)
  MeasurableName: String @examples(values: "Measurable #1")
  Origins: NameId
  DateEntered: String @examples(values: "null")
  Measured: Int
  Disabled: Boolean
  Direction: String @examples(values: ["LessThanOrEqual", "LessThan", "GreaterThan", "EqualTo", "GreaterThanNotEqual", "Between"])
  Target: Int @examples(values: 1)
  AltTarget: Int
  OrganizationId: Int @examples(values: 604)
  AccountableUserId: Int @examples(values: 605)
}

type Week {
  Id: String @examples(values: "637004736000000000")
  Type: String @examples(values: "AngularWeek")
  Key: String @examples(values: "AngularWeek_637004736000000000")
  ForWeekNumber: Int @examples(values: 2588)
  ForWeek: String @examples(values: "019-08-04T00:00:00Z")
  DisplayDate: String @examples(values: "2019-07-27T18:00:00Z")
  LocalDate: String @fake(type: recentDate)
  IsCurrentWeek: Boolean
}

type PermissionDto {
  CanEdit: Boolean
}

type NameId {
  Id: Int
  Name: String @fake(type: fullName)
}

type Query {
  getScoreCardData(userId: Int): Scorecard
  getScoreCardMeeting(meetingId: Int!): Scorecard
}

type Mutation_response {
  affected_rows: Int @examples(values: [1])
}

# type Mutation {
# }

schema {
  query: Query
  # mutation: Mutation
}